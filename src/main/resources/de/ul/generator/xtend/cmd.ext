// ================================================================================================================
// roo commands
// ================================================================================================================

// project setup with FQN
String createProject(uml::Package p):
	JAVA de.ul.generator.helper.GeneratorHelper.getFQN(org.eclipse.uml2.uml.Package);
	
// jpa setup
String jpaSetup():
	"jpa setup --database H2_IN_MEMORY --provider OPENJPA";
	
// web mvc setup
String webMvcSetup():
	"web mvc setup";

// web mvc finder
String webMvcFinder():
	"web mvc finder all";
	
// finder add
String createFinder(uml::Class c, String s):
	"finder add " + classArg(c) + " --finderName " + s;
	
// finder add
String finderList(uml::Class c, List[String] l):
	"finder list " + classArg(c) + " --filter " + l;

// enumeration
String createEnum(uml::Enumeration e):
	"enum type " + classArg(e);
	
// enumeration literal
String createEnumLit(uml::EnumerationLiteral el):
	"enum constant " + nameArg(el);

// class
String createClass(uml::Class c):
	"class " + classArg(c) + abstractArg(c) + extendsArg(c);

// class JPA
String createClassJPA(uml::Class c):
	"entity jpa " + classArg(c) + abstractArg(c) + extendsArg(c);
	
// constructor
String createConstructor(uml::Class c):
	"constructor " + classArg(c);

// attribute
String createAttribute(uml::Property p):
	"field " + formatType(p) + " " + fieldNameArg(p) + " " + sizeMinMax(p) + classArg((uml::Class)p.owner);

// association
String createAssociation(uml::Association a):
	"field set " + fieldNameArg(a) + " " + getMemberEnd(a);
	
// equals
String createEquals(uml::Class c):
	"equals " + classArg(c);
	
// JSON all
String createJSON():
	"json all";

// JSON add
String createJSON(uml::Class c):
	"json add " + classArg(c);

// ================================================================================================================
// helper functions
// ================================================================================================================

// abstract argument
String abstractArg(uml::Class c):
	c.isAbstract ? " --abstract" : "";

// extends argument
String extendsArg(uml::Class c):
	c.generalization.isEmpty ? "" : " --extends ~." + (c.generalization.get(0)).general.name;

// attribute type
String formatType(uml::Property p):
	getAttr(p.type, p.association);

// size argument
String sizeMinMax(uml::Property p):
	p.lower > 0 ? "--notNull " : "";

// type helper
String getAttr(uml::Type t, uml::Association a):
	(a == null ? "enum" : "reference") +
	" --type ~." + t.qualifiedName.split("::").last();

// PrimitiveType helper	
String getAttr(uml::PrimitiveType t, uml::Association a):
	t.qualifiedName.endsWith("Float") ? "number --type Float" : 
		(t.qualifiedName.endsWith("Date") ? "date --type string" : 
			t.qualifiedName.split("::").last().toLowerCase());
			
// memberEnd helper
String getMemberEnd(uml::Association a):
	"--type ~." + a.memberEnd.type.getQualifiedName().get(0).split("::").last();
	
// name argument
String nameArg(uml::NamedElement x):
	"--name " + x.name;

// class argument	
String classArg(uml::NamedElement x):
	"--class ~." + x.name;

// fieldName argument
String fieldNameArg(uml::NamedElement x):
	"--fieldName " + x.name;